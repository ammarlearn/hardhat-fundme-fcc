{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__SpendMoreETH",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "FundMe__withdrawCallFailed",
            "type": "error"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "funderIndex",
                    "type": "uint256"
                }
            ],
            "name": "getFunders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        }
    ],
    "transactionHash": "0xa175d68a0b7227598f2fcca37cb22bc49017384bf6650c0e4edeff6e9746f277",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "978235",
        "logsBloom": "0x
        "blockHash": "0x0cc17dbd0d435e59256b9f065917aa2a08b3490fc60cef394b08c7d8e08f94bb",
        "transactionHash": "0xa175d68a0b7227598f2fcca37cb22bc49017384bf6650c0e4edeff6e9746f277",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "978235",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "897fcda15c70a00add141256e6ec02ff",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__SpendMoreETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FundMe__withdrawCallFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"funderIndex\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Ammar tha Boss\",\"details\":\"you can out some comments for the dev here\",\"kind\":\"dev\",\"methods\":{},\"title\":\"a simple FundMe contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"teaches us how funding contracts work\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n//pragma comes first\\npragma solidity ^0.8.8;\\n//then come the import statements\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n//then come the error codes- made a change, added contract name in front of error code\\nerror FundMe__NotOwner();\\nerror FundMe__SpendMoreETH();\\nerror FundMe__withdrawCallFailed();\\n\\n//libraries,then interfaces, then contracts\\n//natspec comments\\n/**\\n * @title a simple FundMe contract\\n * @author Ammar tha Boss\\n * @notice teaches us how funding contracts work\\n * @dev you can out some comments for the dev here\\n */\\n//you can use natspec comments anywhere you wish to use them.\\ncontract FundMe {\\n    //type declarations\\n    using PriceConverter for uint256;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //state variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    //then come events and modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    //then come functions\\n    // in order:\\n    // constructor,reciever,fallback,external,public,internal,private,view/pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n    //we do not need these functions right now, they were only used for as a demo\\n    function fund() public payable {\\n        if (!(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD))\\n            revert FundMe__SpendMoreETH();\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!callSuccess) revert FundMe__withdrawCallFailed();\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory donators = s_funders;\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < donators.length;\\n            funderIndex++\\n        ) {\\n            address funder = donators[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if (!callSuccess) revert FundMe__withdrawCallFailed();\\n    }\\n\\n    //let's add some get functions for our private variables\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 funderIndex) public view returns (address) {\\n        return s_funders[funderIndex];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x7240728ad46edb0d88a68b7c77267cd8c1a58190445468a052ac6fa4ca5893c2\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x694AA1769357215DE4FAC081bf1f309aDC325306\\n        // ); //no need to hardcode it in anymore, we'll pass in the priceFeed\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x755057fd0c37da3afdb02bcece7d7f2ba7862bae6c85a07b70211811020e01e6\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011cf380380620011cf83398181016040528101906200003791906200011f565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000151565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e782620000ba565b9050919050565b620000f981620000da565b81146200010557600080fd5b50565b6000815190506200011981620000ee565b92915050565b600060208284031215620001385762000137620000b5565b5b6000620001488482850162000108565b91505092915050565b60805160601c6110516200017e6000396000818161022c0152818161047301526105f201526110516000f3fe60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b60d428814610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a72565b610199565b6040516100b49190610ab8565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610aff565b6101e2565b6040516100f19190610b3b565b60405180910390f35b61010261022a565b005b34801561011057600080fd5b50610119610462565b6040516101269190610ab8565b60405180910390f35b34801561013b57600080fd5b5061014461046f565b6040516101519190610b3b565b60405180910390f35b34801561016657600080fd5b5061016f610497565b60405161017c9190610bb5565b60405180910390f35b61018d6104c0565b005b6101976105f0565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600282815481106101f8576101f7610bd0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60028054905081101561035b576000600282815481106102d5576102d4610bd0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035390610c2e565b9150506102b2565b50600067ffffffffffffffff81111561037757610376610c77565b5b6040519080825280602002602001820160405280156103a55781602001602082028036833780820191505090505b50600290805190602001906103bb929190610968565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e290610cd7565b60006040518083038185875af1925050503d806000811461041f576040519150601f19603f3d011682016040523d82523d6000602084013e610424565b606091505b505090508061045f576040517f0977f20500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104fd60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088c90919063ffffffff16565b1015610535576040517f5f4702e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105849190610cec565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610675576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156106f957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106af575b5050505050905060005b815181101561078457600082828151811061072157610720610bd0565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077c90610c2e565b915050610703565b50600067ffffffffffffffff8111156107a05761079f610c77565b5b6040519080825280602002602001820160405280156107ce5781602001602082028036833780820191505090505b50600290805190602001906107e4929190610968565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161080b90610cd7565b60006040518083038185875af1925050503d8060008114610848576040519150601f19603f3d011682016040523d82523d6000602084013e61084d565b606091505b5050905080610888576040517f0977f20500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080610898836108c8565b90506000670de0b6b3a764000085836108b19190610d42565b6108bb9190610dcb565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091157600080fd5b505afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190610e89565b5050509150506402540be400816109609190610f04565b915050919050565b8280548282559060005260206000209081019282156109e1579160200282015b828111156109e05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610988565b5b5090506109ee91906109f2565b5090565b5b80821115610a0b5760008160009055506001016109f3565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3f82610a14565b9050919050565b610a4f81610a34565b8114610a5a57600080fd5b50565b600081359050610a6c81610a46565b92915050565b600060208284031215610a8857610a87610a0f565b5b6000610a9684828501610a5d565b91505092915050565b6000819050919050565b610ab281610a9f565b82525050565b6000602082019050610acd6000830184610aa9565b92915050565b610adc81610a9f565b8114610ae757600080fd5b50565b600081359050610af981610ad3565b92915050565b600060208284031215610b1557610b14610a0f565b5b6000610b2384828501610aea565b91505092915050565b610b3581610a34565b82525050565b6000602082019050610b506000830184610b2c565b92915050565b6000819050919050565b6000610b7b610b76610b7184610a14565b610b56565b610a14565b9050919050565b6000610b8d82610b60565b9050919050565b6000610b9f82610b82565b9050919050565b610baf81610b94565b82525050565b6000602082019050610bca6000830184610ba6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3982610a9f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6c57610c6b610bff565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc1600083610ca6565b9150610ccc82610cb1565b600082019050919050565b6000610ce282610cb4565b9150819050919050565b6000610cf782610a9f565b9150610d0283610a9f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3757610d36610bff565b5b828201905092915050565b6000610d4d82610a9f565b9150610d5883610a9f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d9157610d90610bff565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dd682610a9f565b9150610de183610a9f565b925082610df157610df0610d9c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1b81610dfc565b8114610e2657600080fd5b50565b600081519050610e3881610e12565b92915050565b6000819050919050565b610e5181610e3e565b8114610e5c57600080fd5b50565b600081519050610e6e81610e48565b92915050565b600081519050610e8381610ad3565b92915050565b600080600080600060a08688031215610ea557610ea4610a0f565b5b6000610eb388828901610e29565b9550506020610ec488828901610e5f565b9450506040610ed588828901610e74565b9350506060610ee688828901610e74565b9250506080610ef788828901610e29565b9150509295509295909350565b6000610f0f82610e3e565b9150610f1a83610e3e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f5957610f58610bff565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f9657610f95610bff565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fd357610fd2610bff565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110105761100f610bff565b5b82820290509291505056fea264697066735822122081d5bc32a77de88b04ac3df426855a03193dc71f1d3f1203fc37091def17012464736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061007b5760003560e01c8063893d20e81161004e578063893d20e81461012f5780639e87a5cd1461015a578063b60d428814610185578063be2693f01461018f5761007b565b80630343fb25146100805780633a7b6c74146100bd5780633ccfd60b146100fa5780636b69a59214610104575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610a72565b610199565b6040516100b49190610ab8565b60405180910390f35b3480156100c957600080fd5b506100e460048036038101906100df9190610aff565b6101e2565b6040516100f19190610b3b565b60405180910390f35b61010261022a565b005b34801561011057600080fd5b50610119610462565b6040516101269190610ab8565b60405180910390f35b34801561013b57600080fd5b5061014461046f565b6040516101519190610b3b565b60405180910390f35b34801561016657600080fd5b5061016f610497565b60405161017c9190610bb5565b60405180910390f35b61018d6104c0565b005b6101976105f0565b005b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600282815481106101f8576101f7610bd0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102af576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60028054905081101561035b576000600282815481106102d5576102d4610bd0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061035390610c2e565b9150506102b2565b50600067ffffffffffffffff81111561037757610376610c77565b5b6040519080825280602002602001820160405280156103a55781602001602082028036833780820191505090505b50600290805190602001906103bb929190610968565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103e290610cd7565b60006040518083038185875af1925050503d806000811461041f576040519150601f19603f3d011682016040523d82523d6000602084013e610424565b606091505b505090508061045f576040517f0977f20500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104fd60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461088c90919063ffffffff16565b1015610535576040517f5f4702e900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105849190610cec565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610675576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028054806020026020016040519081016040528092919081815260200182805480156106f957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116106af575b5050505050905060005b815181101561078457600082828151811061072157610720610bd0565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061077c90610c2e565b915050610703565b50600067ffffffffffffffff8111156107a05761079f610c77565b5b6040519080825280602002602001820160405280156107ce5781602001602082028036833780820191505090505b50600290805190602001906107e4929190610968565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161080b90610cd7565b60006040518083038185875af1925050503d8060008114610848576040519150601f19603f3d011682016040523d82523d6000602084013e61084d565b606091505b5050905080610888576040517f0977f20500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600080610898836108c8565b90506000670de0b6b3a764000085836108b19190610d42565b6108bb9190610dcb565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561091157600080fd5b505afa158015610925573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109499190610e89565b5050509150506402540be400816109609190610f04565b915050919050565b8280548282559060005260206000209081019282156109e1579160200282015b828111156109e05782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610988565b5b5090506109ee91906109f2565b5090565b5b80821115610a0b5760008160009055506001016109f3565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3f82610a14565b9050919050565b610a4f81610a34565b8114610a5a57600080fd5b50565b600081359050610a6c81610a46565b92915050565b600060208284031215610a8857610a87610a0f565b5b6000610a9684828501610a5d565b91505092915050565b6000819050919050565b610ab281610a9f565b82525050565b6000602082019050610acd6000830184610aa9565b92915050565b610adc81610a9f565b8114610ae757600080fd5b50565b600081359050610af981610ad3565b92915050565b600060208284031215610b1557610b14610a0f565b5b6000610b2384828501610aea565b91505092915050565b610b3581610a34565b82525050565b6000602082019050610b506000830184610b2c565b92915050565b6000819050919050565b6000610b7b610b76610b7184610a14565b610b56565b610a14565b9050919050565b6000610b8d82610b60565b9050919050565b6000610b9f82610b82565b9050919050565b610baf81610b94565b82525050565b6000602082019050610bca6000830184610ba6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c3982610a9f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610c6c57610c6b610bff565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610cc1600083610ca6565b9150610ccc82610cb1565b600082019050919050565b6000610ce282610cb4565b9150819050919050565b6000610cf782610a9f565b9150610d0283610a9f565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d3757610d36610bff565b5b828201905092915050565b6000610d4d82610a9f565b9150610d5883610a9f565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610d9157610d90610bff565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610dd682610a9f565b9150610de183610a9f565b925082610df157610df0610d9c565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610e1b81610dfc565b8114610e2657600080fd5b50565b600081519050610e3881610e12565b92915050565b6000819050919050565b610e5181610e3e565b8114610e5c57600080fd5b50565b600081519050610e6e81610e48565b92915050565b600081519050610e8381610ad3565b92915050565b600080600080600060a08688031215610ea557610ea4610a0f565b5b6000610eb388828901610e29565b9550506020610ec488828901610e5f565b9450506040610ed588828901610e74565b9350506060610ee688828901610e74565b9250506080610ef788828901610e29565b9150509295509295909350565b6000610f0f82610e3e565b9150610f1a83610e3e565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610f5957610f58610bff565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610f9657610f95610bff565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610fd357610fd2610bff565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156110105761100f610bff565b5b82820290509291505056fea264697066735822122081d5bc32a77de88b04ac3df426855a03193dc71f1d3f1203fc37091def17012464736f6c63430008080033",
    "devdoc": {
        "author": "Ammar tha Boss",
        "details": "you can out some comments for the dev here",
        "kind": "dev",
        "methods": {},
        "title": "a simple FundMe contract",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "teaches us how funding contracts work",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "0",
                "type": "t_contract(AggregatorV3Interface)45"
            },
            {
                "astId": 66,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 69,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "2",
                "type": "t_array(t_address)dyn_storage"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
